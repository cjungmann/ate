.if \n[include_flag]==0 \{\
.  TH debug 1
.  so macros.1
.\}
.SS SEEK_KEY
.PP
.proto_seek_key
.PP
This action searches to find the value of
.I target_value
in the first column of the table named by
.IR search_handle_name .
.PP
.B OPTIONS
.sp -1
.RS 4
.TP
.I key_handle_name
is the name of the handle created by a previous call to
.BR make_key .
.TP
.I search_value
is the string value against which the key values will are to be
compared.
.TP
.B -d
run in
.BR "debug mode" .
Every comparison will be printed with the compared values and
the result of the comparison.
This feature was developed for confirming proper operation, but may
also have some value for helping developers understand unexpected
search results.
.TP
.B -i
make comparisons in
.BR "integer mode" .
The key values will be converted to integer values before
comparing them.
This option should only be used if all key column values are
integers and are sorted in integer order, especially if the
table was generated by
.B make_key
with the
.B -i
option.
.TP
.B -p
run search in
.BR "permissive mode" ,
which returns the row number in the key table of the first row
whose value is
.B equal to or greater than
the
.IR search_value .
.TP
.B -s
run search in
.BR "sequential mode" ,
visiting each row in table order and returning the row
index of the first perfect match.
This search works for non-sorted tables, comparing the
value of the first field of each row.
.IP
Running in
.B sequential mode
disables the
.B -p
flag.
.TP
.BI -o " outcome_name"
changes the name of the variable that reports the outcome of the
search from
.B ATE_SEEK_RESULT
to the value of
.IR outcome_name .
.TP
.BI "-t " tally_value_name
enables
.BR "tally mode" ,
where each comparison is counted and the total number of
comparisons made in the search are returned in the shell
variable named after the value in the
.I tally_value_name
option.
.arg_return_value "key table row index"
.RE
.TP
.B Exit Status
A zero exit status means the search ran without error, not that a match
was found.  A non-zero exit status typically indicates a usage error.
The
.B ATE_ERROR
variable will contain an explanation of a non-zero exit status.
.TP
.B Search Outcome
After a search, the outcome of the search will be reported in
.B ATE_SEEK_OUTCOME
by default, or in
.I outcome_name
if the
.B -o
option was used.
The possible outcomes are:
.IP
.TS
tab(|);
llx.
0|no match
1|exact match
2|T{
approximate match when
.BR "permissive mode " ( -p )
is set
T}
.TE
.TP
.B Search Result
The index value of the matching row in the search table will be
reported in the
.B ATE_VALUE
variable or
.I value_name
if set by the
.B -v
option.
.SS DISCUSSION
.TP
.B Search Method
By default,
.B seek_key
uses a binary search strategy to find matching record.
This assumes that the key table is sorted on the first column.
.IP
Unsorted tables can be searched by setting the
.I sequential
flag with the
.B -s
option.
.TP
.B Intended Usage
.B seek_key
was made to search the two-column key table generated by the
.B make_key
action.
.IP
Accessing source table rows from a search takes some steps:
.TS
tab(|);
llx.
1|T{
Run search with the
.B seek_key
action.
T}
2|T{
Use
.B get_row
to get the key table row using the row index reported in the
.B ATE_RESULT
variable by the
.B seek_key
action.
T}
3|T{
Use
.B get_row
again to get the source table row using the index found in the
second field of the key table row accessed in the previous step.
T}
.TE
.TP
.B Alternate Uses
While
.B seek_key
is designed to work with the results of
.BR make_key ,
the implementation allows it to work with any
.B ate
table.
.IP
First of all, tables whose first column is sorted (use the
.B sort
action) can take advantage
of the speedy binary search.
This is arguably the best practice for a table for which only one
sort order is needed.
.IP
Unsorted tables can use the
.B -s
flag to search the first column of the table.
