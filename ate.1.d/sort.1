.if \n[include_flag]==0 \{\
.  TH debug 1
.  so macros.1
.\}
.SS SORT
.PP
Create a duplicate table handle with the rows sorted based
on the order imposed by a callback function.
This action exposes the C-library
.B qsort
function for use in a Bash script.
.PP
.B ate sort
.I handle_name comparison_function sorted_handle_name
.RS 7
.arg_handle
.TP
.I comparison_function
the name of a script callback function that will report the
relative order of two given rows
.TP
.I sorted_handle_name
the requested name for the new sorted handle
.TP
.RI [ ... ]
optional extra arguments, as needed, to be transmitted to the
.I comparison_function
for each row.
.RE
.PP
.B Comparison Callback Function
.RS 7
.PP
The callback
.I comparison_function
ranks two rows according to which should go first.
It will get three variable name arguments with which it will make
local nameref variables to access their contents and to return the
comparison.
.TS
tab(|);
l lx.
\(Do1|T{
.B comparison result
variable name to which the result of the comparison between the left
and right row is to be written
T}
\(Do2|T{
.B left row
array name of the current comparison
T}
\(Do3|T{
.B right row
array name of the current comparison
T}
\&...|T{
.B extra arguments
that can be optionally passed to the
.B sort
action
T}
.TE

Assuming a nameref variable for
.B \(Do1
named
.BR comp_result ,
set
.B comp_result
to an integer value based on how the left and right rows should be
ordered.
.TS
tab(|);
l l.
left before right|set comp_result to a negative integer
right before left|set comp_result to a positive integer
left equals right|set comp_result to 0
.TE
.RE
