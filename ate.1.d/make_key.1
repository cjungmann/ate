.\" -*- mode: nroff -*-
.so fork.tmac
.SS MAKE_KEY
.PP
.proto_make_key
.PP
Create a key table that contains sorted two-field rows of a key value
and a row index to the source table from which the key is created.
.PP
The key table is intended for use by the
.B seek_key
action to conduct fast binary searches and enable ISAM (indexed
sequential action method) access to the rows of the source table.
.arg_handle
.TP
.I new_handle_name
name to use for the new key handle
.TP
.B -i
enable integer sorting method
.TP
.B -r
enable reverse sorting (descending order)
.TP
.BI "-c " column_index
alternate table column to use for sorting the key.
The default value, if no
.B -c
options is specified, is to use column index 0.
.TP
.BI "-f " set_key_function
is called by
.B make_key
for each row to get a computed key value.  See
.B SET KEY FUNCTION
below.
.TP
.RI [ ... ]
optional extra arguments, as needed, to be transmitted to the
.I set_key_function
for each row.
.PP
.TP
.B SET KEY FUNCTION
tells
.B make_key
to call the script function named by the
.I set_key_function
argument for each row of the source table to compute the key value
to be used for the row.
.IP
The script function will receive the following arguments from
.BR make_key :
.IP
The callback function will receive the following arguments:
.RS 8
.TS
tab(|);
l lx.
\(Do1|T{
use with nameref variable to that will be used to return the
computed key value for the row.
T}
\(Do2|T{
use with nameref variable to access a copy of the current row from
the source table.
T}
\&...|T{
optional extra arguments submitted to the action
.BR make_key .
T}
.TE
.RE
.IP
Here is a simple example of a
.IR set_key_function :

.EX
set_key_function()
{
   local -n skf_keyval=\(dq\(Do1\(dq
   local -n skf_row=\(dq\(Do2\(dq

   # make lower-case for case-insensitive searches
   sfk_keyval=\(dq\(Do{skf_row[0],,}\(dq
}
.EE
.PP
Refer to the
.B SEEK_KEY EXAMPLE
below.
.PP
See the
.B SEEK_KEY
action above and the
.B SEEK_KEY EXAMPLE
below.
