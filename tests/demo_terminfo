#!/usr/bin/env bash

enable -f ../ate.so ate

source print_formatted_table_with_nulls

make_terminfo_regex()
{
    local -n mtr_regex="$1"
    local -a rearr=(
        ^
        \([[:space:]]\{50,\}\) # must by highly-indented,
                               # save to determine indentation

        \([^[:space:]]+\)      # variable name
        [[:space:]]\{2,\}      # gap of at least 2 spaces
        \([^[:space:]]+\)      # cap name
        [[:space:]]\{2,\}      # gap of at least 2 spaces
        \([^[:space:]]\{2\}\)  # termcap code
        [[:space:]]\{2,\}      # gap of at least 2 spaces
        \(.*\)                 # description
        $
    )

    local OIFS="$IFS"
    IFS=''
    mtr_regex="${rearr[*]}"
    IFS="$OIFS"
}

make_caps_catalog_array()
{
    local -n mta_array="$1"
    local parse_variable=^[[:space:]]\{50,\}Variable[[:space:]]\{6,\}Cap
    local parse_var_type=^[[:space:]]\{50,\}\([^[:space:]]\{2,\}\)
    local parse_line
    make_terminfo_regex "parse_line"
    local regex_extra=[[:space:]]\{80\}\(.*\)$

    local -i inline=0
    local -i margin=0
    local indented

    local var_type

    local -a line_parts
    local -n rm_indent="BASH_REMATCH[1]"

    while read -r; do
        # Skip lines until we have a var type
        if [ "${#var_type}" -lt 2 ]; then
            if [ -z "$var_type" ]; then
                 if [[ "$REPLY" =~ $parse_variable ]]; then
                     var_type=1
                 fi
            elif [[ "$REPLY" =~ $parse_var_type ]]; then
                var_type="${BASH_REMATCH[1]:0:2}"
                var_type="${var_type,,}"
            fi
            continue
        fi

        # Ignore empty lines when we're processing a var_type
        if [[ "$REPLY" =~ ^[[:space:]]*$ ]]; then
           continue
        fi

        # Append follow-on description lines to line_parts[3]:
        if [ "${#line_parts[*]}" -gt 3 ]; then
            if [[ "$REPLY" =~ $regex_extra ]]; then
                local desc="${line_parts[3]}"
                if [[ "${desc: -1:1}" != '-' ]] ; then
                    desc="$desc "
                fi
                line_parts[3]="${desc}${BASH_REMATCH[1]}"
                continue
            else
                mta_array+=( "${line_parts[@]}" "$var_type" "n/a" )
                line_parts=()
            fi
        fi

        if [[ "$REPLY" =~ $parse_line ]]; then
            line_parts=( "${BASH_REMATCH[@]:2}" )
            if [ "${#line_parts[*]}" -gt 3 ]; then
                if (( margin == 0 )); then
                    indented="${BASH_REMATCH[1]}"
                    margin="${#indented}"
                    regex_extra=^[[:space:]]\{$(( margin + 10 )),\}\(.\*\)$
                fi
            fi
        else
            var_type=''
        fi
        # Avoid need to parse word-break hyphens by disabling hyphenation:
    # done < terminfo2.txt
    done < <( MANWIDTH=300 man --nh 5 terminfo )
}

make_cap_values_array()
{
    local -n mva_values="$1"

    local -a re_arr=(
        ^
        [[:space:]]+
        \(
           [^=]+
        \)
        \(
           =
           \(
              [^,]+
           \)
           ,
        \)?
        $
    )
    local OIFS="$IFS"
    IFS=''
    local re="${re_arr[*]}"
    IFS="$OIFS"

    local -n field="BASH_REMATCH[1]"
    local -n raw_value="BASH_REMATCH[3]"
    local value

    while read -r; do
        if [[ "$REPLY" =~ $re ]]; then
            if [ -n "$raw_value" ]; then
                value="${raw_value//\\,|\\054/,}"
                value="${raw_value}"
            else
                value="1"
            fi
            mva_values+=( "$field" "$value" )
        fi
    done < <( infocmp -1 )
}

string_compare()
{
    local -n sc_compval="$1"
    local left="$2"
    local right="$3"
    if [[ "$left" < "$right" ]]; then
        sc_compval=-1
    elif [[ "$left" > "$right" ]]; then
        sc_compval=1
    else
        sc_compval=0
    fi
    return 0;
}

cat_name_tagger()
{
    local -n ct_return="$1"
    local -n ct_row="$2"
    ct_return="${ct_row[1]}"
    return 0
}

reconcile_by_codes()
{
    local -n rbc_catalog="$1"
    local -n rbc_value="$2"

    # Make a temporary key for speedy record search
    ate make_key "rbc_catalog" cat_key_name -f cat_name_tagger

    rbc_fixrow()
    {
        local -n rf_row="$1"
        local -i index="$2"
        local -n rf_handle="$3"

        local -i catndx

        local capname="${rf_row[0]}"
        local capvalue="${rf_row[1]}"

        if ate seek_key cat_key_name "$capname" -v keyndx; then
            if ate get_row cat_key_name "$keyndx" -a keyrow; then
                catndx="${keyrow[1]}"
                if ate get_row "rbc_catalog" "$catndx" -a catrow; then
                    catrow[5]="$capvalue"
                    ate put_row "rbc_catalog" "$catndx" "catrow"
                fi
            fi
        else
            printf $'for \e[32;1m%s\e[m, we did not find a key (%s).\n' "$capname" "$ATE_ERROR"
        fi

        return 0
    }

    # For each value, update its catalog entry:
    ate walk_rows rbc_value rbc_fixrow
}

exit_on_error()
{
    local exval="$?"
    if [ "$exval" -ne 0 ]; then
        printf 'ate action failed (%d): %s.\n' "$exval" "$ATE_ERROR"
        exit 1
    fi
}


# Make a table with data from terminfo(5):
declare -a caps_catalog_array
make_caps_catalog_array "caps_catalog_array"
ate declare catalog_handle 6 "caps_catalog_array"
exit_on_error
ate get_row_count catalog_handle -v row_count

# Make a table with data from infocmp
declare -a cap_values_array
make_cap_values_array "cap_values_array"
ate declare vals_handle 2 "cap_values_array"
exit_on_error
ate get_row_count vals_handle -v row_count

reconcile_by_codes "catalog_handle" "vals_handle"


print_formatted_table_with_nulls "catalog_handle"

echo "All good"


# if ate declare ti_handle 6 "lines"; then
#     if ate sort ti_handle sort_on_capname ti_capname; then
#         update_with_values ti_capname
#     else
#         echo "Sort failed"
#     fi
#     # update_with_values ti_handle
#     read -n1 -p Press\ any\ key\ to\ display
#     print_formatted_table_with_nulls ti_handle
# else
#     echo "Failed to initialise the ti_handle"
# fi


# declare -a row
# IFS='|'
# for el in "${lines[@]}"; do
#     row+=( "$el" )
#     if [ "${#row[@]}" -eq 5 ]; then
#         echo "${row[*]}"
#         row=()
#     fi
# done
