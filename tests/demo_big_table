#!/usr/bin/env bash

if ! enable -f ../ate.so ate; then
    echo "Failed to enable ate module."
    exit 1
fi

# Include this for convenient printing
source utilities

# SOURCE FOR THIS DATA, download basic data:
declare data_source_url="https://simplemaps.com/data/us-counties"

# alternate source, more fields, includes coordinates, missing population data:
# https://public.opendatasoft.com/explore/dataset/georef-united-states-of-america-county/table/?disjunctive.ste_code&disjunctive.ste_name&disjunctive.coty_code&disjunctive.coty_name&sort=year

#
# After a consent message, this function downloads and extracts
# the data file used by the table-building part of the script.
#
# Any failure will show an error message and abort the script.
#
prepare_data_source()
{
    local csvfile="uscounties.csv"

    cat <<EOF
To continue with this script, you will need to download data
and extract a file ($csvfile) from a public site,
'$data_source_url'.

This is only required when the $csvfile file is not found.
If you consent to and successfully download and extract the file,
the program will proceed.  If the script is run again, it will
skip this message unless the file was deleted or otherwise missing.

Running 'make clean' in the project's root directory will delete
the downloaded files.

EOF

    read -n1 -p "Press 'y' to consent to download, any other key to abort"
    if ! [[ "${REPLY,,}" == 'y' ]]; then
        echo
        exit 1
    fi

    local url_root="${data_source_url%%/data*}"
    local data_url

    # Download webpage and extract database location
    local data_file
    local retarget=href=\"\([^\"]+\\.zip\)\"
    while read -r; do
        if [[ "$REPLY" =~ $retarget ]]; then
            data_url="${url_root}${BASH_REMATCH[1]}"
            break
        fi
    done < <( wget -q -O- "$data_source_url" )

    if [ -n "$data_url" ]; then
        echo "Found the URL: '$data_url'"
        data_file="${data_url##*/}"
        echo "About to attempt downloading '$data_url' to $data_file"
        if wget -q "$data_url" -O "$data_file"; then
            if unzip "$data_file" "$csvfile"; then
                echo "The '$csvfile' is now available."
                read -n1 -p "Press any key to continue the script."
            else
                echo "Failed to extract '$csvfile'"
            fi
        else
            echo "Failed to download the '$data_file' from '$data_source_url'"
        fi
    else
        echo "Failed to find data source URL from the '$data_source_url'."
    fi

    exit 1
}

exit_on_error()
{
    local -i ecode="$1"
    if [ "$ecode" -ne 0 ]; then
        printf $'Error code \e[31;1m%d\e[m, \e[32;1m%s\e[m.\n' "$ecode" "$ATE_ERROR"
        exit 1
    fi
}

declare unparan_re=^\"\([^\"]+\)\"
unparenthesize()
{
    local -n u_array="$1"
    local -a arrcopy=( "${u_array[@]}" )
    u_array=()
    local el
    for el in "${arrcopy[@]}"; do
        if [[ "$el" =~ $unparan_re ]]; then
            u_array+=( "${BASH_REMATCH[1]}" )
        else
            u_array+=( "ERROR" )
        fi
    done
}

fill_table()
{
    local handle_name="$1"

    local source_name="uscounties.csv"
    if ! [ -e "$source_name" ]; then
        prepare_data_source
    fi

    local OIFS="$IFS"
    local IFS=','

    local -a temp_array
    local -i count=0
    while read -r -a cty; do
        unparenthesize "cty"
        temp_array=( $(( count++ ))  "${cty[1]}" "${cty[4]}" "${cty[5]}" "${cty[3]}" "${cty[8]}" )
        ate append_data "$handle_name" "${temp_array[@]}"
    done < "$source_name"

    ate index_rows "$handle_name"
    exit_on_error "$?"
}

set_key_name()
{
    local -n skn_return="$1"
    local -n skn_row="$2"
    skn_return="${skn_row[1]}"
    return 0
}

test_seek_county()
{
    local hname_data="$1"
    local hname_key="$2"
    local value="$3"
    local key_value

    if ate seek_key "$hname_key" "$value" -v key_ndx -t seek_tally; then
        echo "Seek succeeded with $seek_tally comparisons"
        while true; do
            if ate get_row "$hname_key" "$key_ndx" -a key_row; then
                key_value="${key_row[0]}"
                if [[ "$key_value" == "$value" ]]; then
                    if ate get_row "$hname_data" "${key_row[1]}" -a data_row; then
                        printf $'For value \e[32;1m%s\e[m, we found this row: \e[32;1m%s\e[m.\n' "$value" "${data_row[*]}"
                    else
                        echo "ATE_ERROR IS '$ATE_ERROR'"
                        printf $'Key for \e[32;1m%s\e[m suggested table index \e[32;1m%d\e[m, but it failed.\n' "$value" "${key_row[1]}"
                    fi
                else
                    break
                fi
            else
                echo "ATE_ERROR IS '$ATE_ERROR'"
                printf $'A key row for \e[32;1m%s\e[m found, but record not accessible.\n' "$value"
                break
            fi
            (( ++key_ndx ))
        done
    else
        echo "ATE_ERROR IS '$ATE_ERROR'"
        printf $'Value \e[32;1m%s\e[m not found.\n' "$value"
    fi

}

demo_range_output()
{
    local name_handle="$1"
    local name_key="$2"
    local range_prefix="$3"
    local re_member=^"${range_prefix}".\*
    local -i count=0

    local -a fi_array=()

    if ate seek_key "$name_key" "$range_prefix" -v key_ndx; then
        while :; do
            ate get_row "$name_key" "$key_ndx" -a key_row
            exit_on_error

            if [[ "${key_row[0]}" =~ $re_member ]]; then
                ate get_row "$name_handle" "${key_row[1]}" -a county_row
                exit_on_error

                fi_array+=( "${county_row[1]}" "${county_row[2]}" "${county_row[5]}" )
                (( ++key_ndx ))
            else
                break
            fi
        done

        ate declare sub_handle 3 fi_array
        exit_on_error

        print_formatted_table "sub_handle"
        unset "sub_handle"
    else
        echo "Error seeking '$range_prefix', '$ATE_ERROR'"
    fi
}

ate declare "counties_handle" 6
exit_on_error "$?"

fill_table "counties_handle"

# print_formatted_table "counties_handle"

# ate make_key "counties_handle" "key_county_names" -f set_key_name
ate make_key "counties_handle" "key_county_names" -c 1
exit_on_error "$?"

print_formatted_table "key_county_names" | less

# read -n1 -pPress\ any\ key\ to\ begin\ seek\ tests


# test_seek_county "counties_handle" "key_county_names" "Hennepin"
# test_seek_county "counties_handle" "key_county_names" "York"
# test_seek_county "counties_handle" "key_county_names" "Zapata"
# test_seek_county "counties_handle" "key_county_names" "Adams"


while :; do
printf $'\e[2J\e[1;1H'
cat <<EOF
Type a few letters then ENTER to see the county names that start
with the letters.

Press ENTER with zero letters to quit.

EOF

declare filter
if read -r filter; then
    demo_range_output "counties_handle" "key_county_names" "$filter" | less
else
    echo "You're done, baby"
fi

done

